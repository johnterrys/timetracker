// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TimeCats;

namespace TimeCats.Migrations
{
    [DbContext(typeof(TimeTrackerContext))]
    partial class TimeTrackerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("TimeCats.Models.Course", b =>
                {
                    b.Property<int>("courseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("InstructorId")
                        .HasColumnType("integer");

                    b.Property<string>("courseName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("isActive")
                        .HasColumnType("boolean");

                    b.HasKey("courseID");

                    b.HasIndex("InstructorId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            courseID = 1,
                            InstructorId = 2,
                            courseName = "Test Course",
                            description = "This is a test course for testing.",
                            isActive = true
                        });
                });

            modelBuilder.Entity("TimeCats.Models.Group", b =>
                {
                    b.Property<int>("groupID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("groupName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("isActive")
                        .HasColumnType("boolean");

                    b.Property<int>("projectID")
                        .HasColumnType("integer");

                    b.HasKey("groupID");

                    b.HasIndex("projectID");

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            groupID = 1,
                            groupName = "Test Group 1",
                            isActive = true,
                            projectID = 1
                        });
                });

            modelBuilder.Entity("TimeCats.Models.Project", b =>
                {
                    b.Property<int>("projectID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CourseID")
                        .HasColumnType("integer");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("isActive")
                        .HasColumnType("boolean");

                    b.Property<string>("projectName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("projectID");

                    b.HasIndex("CourseID");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            projectID = 1,
                            CourseID = 1,
                            description = "This is the first test project",
                            isActive = true,
                            projectName = "Test Project 1"
                        });
                });

            modelBuilder.Entity("TimeCats.Models.TimeCard", b =>
                {
                    b.Property<int>("timeslotID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("createdOn")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("groupID")
                        .HasColumnType("integer");

                    b.Property<string>("timeIn")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("timeOut")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("userID")
                        .HasColumnType("integer");

                    b.HasKey("timeslotID");

                    b.HasIndex("groupID");

                    b.HasIndex("userID");

                    b.ToTable("TimeCards");
                });

            modelBuilder.Entity("TimeCats.Models.User", b =>
                {
                    b.Property<int>("userID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("isActive")
                        .HasColumnType("boolean");

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<char>("type")
                        .HasColumnType("character(1)");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("userID");

                    b.HasIndex("username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            userID = 1,
                            Salt = new byte[] { 190, 176, 135, 224, 169, 56, 102, 7, 176, 216, 51, 210, 173, 9, 127, 133, 175, 162, 0, 106, 109, 47, 104, 193, 19, 15, 16, 119, 247, 150, 198, 151 },
                            firstName = "Adam",
                            isActive = true,
                            lastName = "Admin",
                            password = "bSr2t3bUhq39QdFZvwPwG1diG4sRMS92KJz0wzcRQqE=",
                            type = 'A',
                            username = "Admin"
                        },
                        new
                        {
                            userID = 2,
                            Salt = new byte[] { 190, 176, 135, 224, 169, 56, 102, 7, 176, 216, 51, 210, 173, 9, 127, 133, 175, 162, 0, 106, 109, 47, 104, 193, 19, 15, 16, 119, 247, 150, 198, 151 },
                            firstName = "Steve",
                            isActive = true,
                            lastName = "Jobs",
                            password = "bSr2t3bUhq39QdFZvwPwG1diG4sRMS92KJz0wzcRQqE=",
                            type = 'I',
                            username = "Instructor"
                        },
                        new
                        {
                            userID = 3,
                            Salt = new byte[] { 190, 176, 135, 224, 169, 56, 102, 7, 176, 216, 51, 210, 173, 9, 127, 133, 175, 162, 0, 106, 109, 47, 104, 193, 19, 15, 16, 119, 247, 150, 198, 151 },
                            firstName = "Normal",
                            isActive = true,
                            lastName = "User",
                            password = "bSr2t3bUhq39QdFZvwPwG1diG4sRMS92KJz0wzcRQqE=",
                            type = 'S',
                            username = "User"
                        });
                });

            modelBuilder.Entity("TimeCats.Models.UserCourse", b =>
                {
                    b.Property<int>("userID")
                        .HasColumnType("integer");

                    b.Property<int>("courseID")
                        .HasColumnType("integer");

                    b.HasKey("userID", "courseID");

                    b.HasIndex("courseID");

                    b.ToTable("UserCourses");

                    b.HasData(
                        new
                        {
                            userID = 3,
                            courseID = 1
                        });
                });

            modelBuilder.Entity("TimeCats.Models.UserGroup", b =>
                {
                    b.Property<int>("userID")
                        .HasColumnType("integer");

                    b.Property<int>("groupID")
                        .HasColumnType("integer");

                    b.HasKey("userID", "groupID");

                    b.HasIndex("groupID");

                    b.ToTable("UserGroups");

                    b.HasData(
                        new
                        {
                            userID = 3,
                            groupID = 1
                        });
                });

            modelBuilder.Entity("TimeCats.Models.Course", b =>
                {
                    b.HasOne("TimeCats.Models.User", "Instructor")
                        .WithMany()
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TimeCats.Models.Group", b =>
                {
                    b.HasOne("TimeCats.Models.Project", "Project")
                        .WithMany("groups")
                        .HasForeignKey("projectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TimeCats.Models.Project", b =>
                {
                    b.HasOne("TimeCats.Models.Course", "Course")
                        .WithMany("projects")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TimeCats.Models.TimeCard", b =>
                {
                    b.HasOne("TimeCats.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("groupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimeCats.Models.User", "User")
                        .WithMany("timecards")
                        .HasForeignKey("userID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TimeCats.Models.UserCourse", b =>
                {
                    b.HasOne("TimeCats.Models.Course", "Course")
                        .WithMany("UserCourses")
                        .HasForeignKey("courseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimeCats.Models.User", "User")
                        .WithMany("UserCourses")
                        .HasForeignKey("userID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TimeCats.Models.UserGroup", b =>
                {
                    b.HasOne("TimeCats.Models.Group", "Group")
                        .WithMany("UserGroups")
                        .HasForeignKey("groupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimeCats.Models.User", "User")
                        .WithMany("UserGroups")
                        .HasForeignKey("userID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
